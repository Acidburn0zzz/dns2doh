#!/usr/bin/perl

use Encode qw(encode);
use MIME::Base64 qw(encode_base64url decode_base64url);
use Socket qw(inet_pton AF_INET6 AF_INET);

sub help {
    print STDERR "Usage: dns2doh [options] [input]\n",
        "Options:\n",
        " --A       encode a type A request\n",
        " --AAAA    encode a type AAAA request\n",
        " --decode  decode DOH input to type + host name\n",
        " --encode  encode host name input to DOH\n",
        " --hex     show extra hex output\n",
        " --hosts=[file] data for custom responses\n",
        " --NS      encode a type NS request\n",
        " --onlyq   encode only the question\n",
        " --raw     output without encoding\n";
    exit;
}


my $h;
my $type = 1; # default type is A
my $onlyq = 0; # set to 1 if only asking, not getting the answer
my $encode = 1; # default is base64 encode
while($ARGV[0]) {

    if($ARGV[0] eq "--hex") {
        $showhex=1;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--decode") {
        $decode=1;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--encode") {
        $encode=1;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--onlyq") {
        $onlyq=1;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--raw") {
        # do not base64 encode output, pass it out "raw"
        $encode=0;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--A") {
        $type=1;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--AAAA") {
        $type=28;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--NS") {
        $type=2;
        shift @ARGV;
    }
    elsif($ARGV[0] eq "--AAAA") {
        $type=28;
        shift @ARGV;
    }
    elsif(($ARGV[0] eq "--help") ||
          ($ARGV[0] eq "-h")) {
        help();
    }
    elsif($ARGV[0] =~ /--hosts=(.*)/) {
        $hosts = $1;
        shift @ARGV;
    }
    else {
        $h = $ARGV[0];
        last;
    }
}

if(!$h) {
    while(<STDIN>) {
        $h .= $_;
    }
}

if($hosts) {
    # host type address
    # www.example.com A 127.0.0.1
    # www.example.com AAAA 2606:2800:220:1:248:1893:25c8:1946

    open(H, "<$hosts");
    while (<H> ) {
        chomp;
        if($_ =~ /^ *\#/) {
            # comment
            next;
        }
        elsif($_ =~ /([^ ]*) *([^ ]*) *([^ ]*)/) {
            my ($name, $type, $addr) = ($1, $2, $3);
            $faketype{$name}{$type} .= "$addr ";
        }
    }
    close(H);
}

if($decode) {
    # decode base64url encoded DNS packet and extract host name
    my $r = decode_base64url($h);
    hexdump($r, "Incoming") if($showhex);
    my @arr = split(//, $r);
    my $i=12;
    my $len = ord($arr[$i++]);
    my $name;
    while($len) {
        while($len) {
            $name .= $arr[$i++];
            $len--;
        }
        $len = ord($arr[$i++]);
        if($len) {
            $name .= ".";
        }
    }
    # TYPE is 16 bits following the name
    my $DTYPE = ord($arr[$i++]) << 8;
    $DTYPE += ord($arr[$i++]);
    printf "%s $name\n", $DTYPE == 28?"AAAA":"A";
    exit;
}

my $answers;
my @rdata;
if(!$onlyq && ($type != 2)) {
    my $digtype = ($type == 28)?"AAAA":"A";

    my @dig;
    if($faketype{$h}{$digtype}) {
        foreach my $a (split(/ /, $faketype{$h}{$digtype})) {
            push @dig, "$a\n";
        }
    }
    else {
        @dig=`dig +short -t $digtype $h`;
    }

    if(!$dig[0]) {
        # blank return: not found
        exit;
    }

    # dig[0] starts with names, then follows IP addresses
    foreach my $ipstr (@dig) {
        chomp $ipstr;
        my $address;

        $address = inet_pton( ($type == 28)?AF_INET6:AF_INET, $ipstr);
        if(!$address) {
            # not a valid address
            next;
        }
        push @rdata, $address;
        $answers++;
    }
    
    if(!$answers) {
        # no addresses
        exit;
    }
}
elsif(!$onlyq && ($type == 2)) {
    my @ns;
    my $digtype = "NS";
    # NS record lookup
    if($faketype{$h}{$digtype}) {
        foreach my $a (split(/ /, $faketype{$h}{$digtype})) {
            push @ns, "$a\n";
        }
    }
    else {
        @ns=`dig +short -t $digtype $h`;
    }

    if(!$ns[0]) {
        # blank return: no NS found
        exit;
    }
    foreach my $n (@ns) {
        push @rdata, QNAME($n);
    }
}

my $seconds = 55; # TODO: get the real

sub hexdump {
    my ($raw, $title) = @_;
    my $i=0;

    if($title) {
        print "= $title\n";
    }
    my $s;
    for my $c (split(//, $raw)) {
        if(!($i%16)) {
            my $txt="\n";
            if($i) {
                $txt="  |$s|\n";
                $s="";
            }
            printf "%s%02x: ", $i?$txt:"", $i;
        }
        printf ("%02x ", ord($c));
        if((ord($c)>=32) && (ord($c)<127)) {
            $s .= $c;
        }
        else {
            $s .= '.';
        }
        $i++;
    }
    if($s) {
        my $left;
        if($i%16) {
            $left = ' ' x ((16-$i%16)*3);
        }
        print "$left  |$s|\n";
    }
    else {
        print "\n";
    }
}

sub QNAME {
    my ($h) = @_;
    my $raw;

    my @labels=split(/\./, $h);
    foreach my $l (@labels) {
        #print STDERR "Label: $l\n";
        $raw .= sprintf("%c", length($l));
        $raw .= $l;
    }
    $raw .= "\x00"; # end with a zero labeel
    return $raw;
}

my $qname = QNAME($h);
my $qnameptr =  sprintf("\xc0\x0c", $answers);
my $ancount = sprintf("\x00%c", $answers);
my $qtype = sprintf("\x00%c", $type); # for now
my $ttl = pack 'N', $seconds;

my $header = sprintf("\x00\x00". # ID
                     "\x00\x01". # |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
                     "\x00\x00". # QDCOUNT
                     $ancount. # ANCOUNT
                     "\x00\x00". # NSCOUNT
                     "\x00\x00"); # ARCOUNT
my $question = sprintf("$qname".   # QNAME
                       "$qtype". # QTYPE
                       "\x00\x01");  # QCLASS

foreach my $rd (@rdata) {
    my $len = length($rd);
    my $rdlen = pack 'n', $len;
    my $one .= sprintf("$qnameptr". # QNAME (pointer)
                       "$qtype".    # QTYPE
                       "\x00\x01".  # QCLASS
                       "$ttl".      # TTL
                       "$rdlen".    # RDLENGTH
                       "$rd");      # RDATA
    $resource .= $one;
}

my $msg = "$header$question$resource";
if($onlyq) {
    $msg = "$header$question";
}

my $output = encode("iso-8859-1", "$msg");

if($showhex) {
    hexdump($output, "ALL");
    hexdump($header, "Header");
    hexdump($question, "Question");
    hexdump($resource, "Resources") unless($onlyq);
}
elsif($encode) {
    my $encoded = encode_base64url($output, "");
    $encoded =~ s/[=]+\z//;

    print "$encoded\n";
}
else {
    # raw
    print "$output";
}
